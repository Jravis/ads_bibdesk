#!/bin/sh
# ADS to BibDesk -- frictionless import of ADS publications into BibDesk
# Copyright (C) 2011  Rui Pereira <rui.pereira@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# ugliest hack in the world - harcoded/compressed strings of both applescript and python scripts as in the automator actions
py="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"
scpt="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"
tmpdir=$(python -c "import tempfile; print tempfile.mkdtemp()")
python -c "import binascii,zlib;\
           out=open('${tmpdir}/py.py', 'w'); print >> out, zlib.decompress(binascii.a2b_base64('${py}')); \
           out=open('${tmpdir}/scpt.scpt', 'w'); print >> out, zlib.decompress(binascii.a2b_base64('${scpt}'))"

# go the tmp directory
cd $tmpdir

# fetch arXiv bibcodes from BibDesk using an applescript
bibcodes=$(cat << EOF | osascript -
tell document 1 of application "BibDesk"
	set bibcodes to {}
	repeat with thePub in publications
		if (count (every field of thePub whose name is "Adsurl" and (value contains "arxiv" or value contains "astro.ph"))) > 0 then
			-- get bibcode from ADSurl
			set ADSurl to (value of every field of thePub whose name is "Adsurl")
			set AppleScript's text item delimiters to "/"
			set end of bibcodes to last text item of text item 1 of ADSurl
		end if
	end repeat
end tell
set AppleScript's text item delimiters to " "
return bibcodes as text
EOF
)

if [ "$bibcodes" == "" ]; then echo "Nothing to update!"; exit; fi
# check for changed bibcodes
nbibcodes=$(echo $bibcodes | wc -w)
python -c "import math;n=$nbibcodes;t=math.ceil(n*15./60.); print 'Checking %i ArXiv entries for changes...\n(to prevent ADS flooding this will take a while, check back in around %i %s)' % (n, t, t > 1 and 'minutes' or 'minute')"
python py.py -u $bibcodes
# python py.py -u $bibcodes --debug # DEBUG MODE

changed=$(wc -l changed_arxiv | awk '{print $1}')
if [ "$changed" -gt "0" ]
then
    echo ""; echo "Updating $changed entries, continue? (y/[n])"
    read -n1 -s continue
else
    echo ""; echo "Nothing to update!"
    exit
fi
if [ "$continue" != "Y" ] && [ "$continue" != "y" ]
then exit
fi

echo "(to prevent ADS flooding, we will wait for a while between each update, so go grab a coffee)"
# update bibcodes
for bibcode in `cat changed_arxiv`; do
    echo "Updating $bibcode..."
    # sleep 1 minute if updating a lot of stuff, if not wait only 10s
    if [ "$changed" -gt "10" ]
    then
        sleep 60
    else
        sleep 15
    fi
    osascript scpt.scpt `python py.py ${bibcode}`
done

#clean up
cd - > /dev/null
rm -rf $tmpdir
