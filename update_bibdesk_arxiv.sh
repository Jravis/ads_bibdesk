#!/bin/sh
# ADS to BibDesk -- frictionless import of ADS publications into BibDesk
# Copyright (C) 2011  Rui Pereira <rui.pereira@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# ugliest hack in the world - harcoded/compressed strings of both applescript and python scripts as in the automator actions
py="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"
scpt="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"
tmpdir=$(python -c "import tempfile; print tempfile.mkdtemp()")
python -c "import binascii,zlib;\
           out=open('${tmpdir}/py.py', 'w'); print >> out, zlib.decompress(binascii.a2b_base64('${py}')); \
           out=open('${tmpdir}/scpt.scpt', 'w'); print >> out, zlib.decompress(binascii.a2b_base64('${scpt}'))"

# go the tmp directory
cd $tmpdir

# fetch arXiv bibcodes from BibDesk using an applescript
bibcodes=$(cat << EOF | osascript -
tell document 1 of application "BibDesk"
	set bibcodes to {}
	repeat with thePub in publications
		if (count (every field of thePub whose name is "Adsurl" and (value contains "arxiv" or value contains "astro.ph"))) > 0 then
			-- get bibcode from ADSurl
			set ADSurl to (value of every field of thePub whose name is "Adsurl")
			set AppleScript's text item delimiters to "/"
			set end of bibcodes to last text item of text item 1 of ADSurl
		end if
	end repeat
end tell
set AppleScript's text item delimiters to " "
return bibcodes as text
EOF
)

if [ "$bibcodes" == "" ]; then echo "Nothing to update!"; exit; fi
# check for changed bibcodes
nbibcodes=$(echo $bibcodes | wc -w)
python -c "import math;n=$nbibcodes;t=math.ceil(n*15./60.); print 'Checking %i ArXiv entries for changes...\n(to prevent ADS flooding this will take a while, check back in around %i %s)' % (n, t, t > 1 and 'minutes' or 'minute')"
python py.py -u $bibcodes
# python py.py -u $bibcodes --debug # DEBUG MODE

changed=$(wc -l changed_arxiv | awk '{print $1}')
if [ "$changed" -gt "0" ]
then
    echo ""; echo "Updating $changed entries, continue? (y/[n])"
    read -n1 -s continue
else
    echo ""; echo "Nothing to update!"
    exit
fi
if [ "$continue" != "Y" ] && [ "$continue" != "y" ]
then exit
fi

echo "(to prevent ADS flooding, we will wait for a while between each update, so go grab a coffee)"
# update bibcodes
for bibcode in `cat changed_arxiv`; do
    echo "Updating $bibcode..."
    # sleep 1 minute if updating a lot of stuff, if not wait only 10s
    if [ "$changed" -gt "10" ]
    then
        sleep 60
    else
        sleep 15
    fi
    osascript scpt.scpt `python py.py ${bibcode}`
done

#clean up
cd - > /dev/null
rm -rf $tmpdir
